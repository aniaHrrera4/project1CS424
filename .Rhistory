xlab = "Result of Die Roll",
ylab = "Frequency",
names.arg = factor(1:length(x)),
col = "darkred"
)
x <- dice_vec[1:6, "dice"]
barplot(x,
main = "Barplot of Dice",
xlab = "Result of Die Roll",
ylab = "Frequency",
names.arg = factor(1:length(x)),
col = "darkred"
)
#(e)
x <- dice_vec[1:length(dice_vec), "dice"]
barplot(x,
main = "Barplot of Dice",
xlab = "Result of Die Roll",
ylab = "Frequency",
names.arg = factor(1:length(x)),
col = "darkred"
)
#(e)
x <- dice_vec[1:length(dice_vec), "dice"]
barplot(x,
main = "Barplot of Dice",
xlab = "Result of Die Roll",
ylab = "Frequency",
names.arg = factor(1:length(x)),
col = "darkred"
)
barplot(dice_vec,
main = "Barplot of Dice",
xlab = "Result of Die Roll",
ylab = "Frequency",
names.arg = factor(1:length(dice_vec)),
col = "darkred"
)
#(f)
set.seed(36) ## make sure that you can replicate your results
samples10 <- as.data.frame(matrix(rep(NA, 100*10), nrow = 100, ncol = 10))
## Creates an empty data frame to store our results in.
## 100*10 = number of rows times number of columns
for (i in 1:100){ ## repeat for each dataset that we want to create
samples10[i,] <- sample(dice_vec, size = 10, replace = TRUE)
} ## performs the sampling; size represents the sample size
rowmeans10 <- rowMeans(samples10) ## generates the average value for
## each row of sampled data
## need to use this result for Questions 7 and 8.
#(h)
hist(rowmeans10,right = FALSE)
qqline(rowmeans10)
#(h)
hist(rowmeans10,right = FALSE)
qqline(rowmeans10)
#(j)
shapiro.test(rowmeans10)
sdresult = sqrt(varianceresult)
print (sdresult)
#(m)
meanrowmeans10 = mean(rowmeans10)
print (meanrowmeans10)
#(n)
varrowmeans10 = var(rowmeans10)
print (varrowmeans10)
sdrowmeans10 = sqrt(varrowmeans10)
print (sdrowmeans10)
#(O)
set.seed(36) ## make sure that you can replicate your results
samples10 <- as.data.frame(matrix(rep(NA, 100*10), nrow = 100, ncol = 10))
## Creates an empty data frame to store our results in.
## 100*10 = number of rows times number of columns
for (i in 1:100){ ## repeat for each dataset that we want to create
samples5000[i,] <- sample(dice_vec, size = 500, replace = TRUE)
} ## performs the sampling; size represents the sample size
rowmeans500 <- rowMeans(samples5000) ## generates the average value for
## each row of sampled data
## need to use this result for Questions 7 and 8 part O
#(O)
set.seed(36) ## make sure that you can replicate your results
samples500 <- as.data.frame(matrix(rep(NA, 100*10), nrow = 100, ncol = 10))
## Creates an empty data frame to store our results in.
## 100*10 = number of rows times number of columns
for (i in 1:100){ ## repeat for each dataset that we want to create
samples500[i,] <- sample(dice_vec, size = 500, replace = TRUE)
} ## performs the sampling; size represents the sample size
rowmeans500 <- rowMeans(samples5000) ## generates the average value for
## each row of sampled data
## need to use this result for Questions 7 and 8 part O
set.seed(36) ## make sure that you can replicate your results
samples500 <- as.data.frame(matrix(rep(NA, 100*10), nrow = 100, ncol = 10))
## Creates an empty data frame to store our results in.
## 100*10 = number of rows times number of columns
for (i in 1:100){ ## repeat for each dataset that we want to create
samples500[i,] <- sample(dice_vec, size = 500, replace = TRUE)
} ## performs the sampling; size represents the sample size
rowmeans500 <- rowMeans(samples500) ## generates the average value for
## each row of sampled data
## need to use this result for Questions 7 and 8 part O
#(h)
hist(rowmeans500,right = FALSE)
#(i)
qqline(rowmeans500)
#(j)
shapiro.test(rowmeans500)
#(m)
meanrowmeans500 = mean(rowmeans500)
print (meanrowmeans500)
#(n)
varrowmeans500 = var(rowmeans500)
print (varrowmeans500)
sdrowmeans500 = sqrt(varrowmeans500)
print (sdrowmeans500)
data <- read.csv(file = "/Users/andreaherrera/Downloads/Dataset.csv", header = TRUE)
str(data.frame)
data <- read.csv(file = "/Users/andreaherrera/Downloads/Dataset.csv", header = TRUE)
str(data.frame())
data <- read.csv(file = "/Users/andreaherrera/Downloads/Dataset.csv", header = TRUE)
data.frame()
str(data.frame)
data <- read.csv(file = "/Users/andreaherrera/Downloads/Dataset.csv", header = TRUE)
#data.frame()
str(data)
levels(data)
x<-factors(data)
str(x)
x<-factor(data)
str(x)
levels(x)
tapply(data, x, mean)
levels(x$Grade)
summary(data)
tapply(data, data,mean)
tapply(x, data$Course,mean)
tapply(data, data$Course,mean)
tapply(data$Course.length, data$Course,mean)
tapply(data$Course, data$Course,mean)
tapply(data$Grade, data$Grade,mean)
tapply(data$Grade, data$Grade,FUN=mean)
length(data)
length(data$Course)
length(data$Grade)
mean(data$Grade)
SD(data$Grade)
v<-var(data$Grade)
sd<- sqrt(v)
print(sd)
fivenum(data$Grade)
summary(data$Course)
tapply(data$Course, x,FUN=mean)
tapply(data, data$Course,FUN=mean)
tapply(length(data$Course), data$Course,FUN=mean)
x<-factor(data$Course)
str(x)
tapply(data$Course, x,FUN=mean)
tapply(x, data$Grade,FUN=mean)
tapply(data$Grade, x,FUN=mean)
x<-factor(data$Course)
tapply(data$Grade, x,FUN=mean)
x<-factor(data$Course)
str(x)
tapply(data$Grade, x,FUN=sd)
fivenum(x)
fivenum(data$Course)
fivenum(x$Stat_101)
fivenum(data$Stat_101)
summary(x)
fivenum(data$Course)
fivenum(data$Course$Stat_101)
fivenum(data$Course[Stat_101])
s101 <- subset(data, data$course == "Stat_101")
fivenum(s101)
s101 <- subset(data, data$course == "Stat_101")
s101 <- subset(data, data$Course == "Stat_101")
fivenum(s101)
s101 <- subset(data, data$Course == "Stat_101")
s101 <- subset(data, data$Course[Stat_101])
s101 <- subset(x, Stat_101)
subset(x, s101 = "Stat_101")
subset(x, s101 == "Stat_101")
fivenum(s101)
s101<-subset(x, select = Stat_101)
s101<- subset(data$Grade, data$Course = "Stat_101")
s101<- subset(data$Grade, data$Course == "Stat_101")
fivenum(s101)
s101<- subset(data$Course, data$Course == "Stat_101")
fivenum(s101)
s101<- subset(data$Grade, data$Course == "Stat_101")
fivenum(s101)
s381<- subset(data$Grade, data$Course == "Stat_381")
fivenum(s381)
s382<- subset(data$Grade, data$Course == "Stat_382")
fivenum(s382)
s401<- subset(data$Grade, data$Course == "Stat_401")
fivenum(s401)
s481<- subset(data$Grade, data$Course == "Stat_481")
fivenum(s481)
box1 <- boxplot(data, horizontal = TRUE)
box1$stats ## provides lower whisker, Q1, median, Q3, and upper whisker values
box1$out ## provides outlier values
box1 <- boxplot(data, horizontal = TRUE)
box1 <- boxplot(x, horizontal = TRUE)
box1 <- boxplot(x, horizontal = TRUE)
box1 <- boxplot(data$Course, horizontal = TRUE)
box1 <- boxplot(data%Grade, horizontal = TRUE)
box1 <- boxplot(data$Grade, horizontal = TRUE)
box1 <- boxplot(data$Grade, horizontal = TRUE)
box1$stats ## provides lower whisker, Q1, median, Q3, and upper whisker values
box1$out ## provides outlier values
box1 <- boxplot(s101, horizontal = TRUE)
box$stats ## provides lower whisker, Q1, median, Q3, and upper whisker values
box$out ## provides outlier values
box1 <- boxplot(s101, horizontal = TRUE)
box1$stats ## provides lower whisker, Q1, median, Q3, and upper whisker values
box1$out ## provides outlier values
box1 <- boxplot(data$Grade~x, horizontal = TRUE)
box1 <- boxplot(data$Grade~x, horizontal = TRUE)
box1$stats ## provides lower whisker, Q1, median, Q3, and upper whisker values
box1$out ## provides outlier values
print(s481)
rvar= seq(0, 120, length.out = 10)
rvar= seq(0, 120, length.out = 12)
rvar= seq(0, 10, length.out = 120)
rvar= seq(from = 0, to = 120, by = 10)
par(mfrow=c(2,2))
hist(s381)
hist(s481)
par(mfrow=c(2,2))
hist(s381,  right = FALSE, main = "Histogram 1",ylim = 7)
hist(s481,right = FALSE, main = "Histogram 2",ylim = 7)
par(mfrow=c(2,2))
hist(s381,  right = FALSE, main = "Histogram 1",ylim = 0:7)
hist(s481,right = FALSE, main = "Histogram 2",ylim = 0:7)
par(mfrow=c(2,2))
hist(s381,  right = FALSE, main = "Histogram 1",ylim = c(0:7))
hist(s481,right = FALSE, main = "Histogram 2",ylim =c(0:7))
par(mfrow=c(2,2))
hist(s381,  right = FALSE, main = "Histogram 1",ylim = c(0,7))
hist(s481,right = FALSE, main = "Histogram 2",ylim =c(0,7))
rvar= seq(from = 0, to = 120, by = 10)
par(mfrow=c(2,2))
hist(s381,  right = FALSE, main = "Histogram 1",freq = TRUE,ylim = c(0,7))
hist(s481,right = FALSE, main = "Histogram 2",freq = TRUE,ylim =c(0,7),breaks =rvar)
par(mfrow=c(2,2))
hist(s381,  right = FALSE, main = "Histogram 1",freq = TRUE,ylim = c(0,7))
hist(s481,right = FALSE, main = "Histogram 2",freq = TRUE,ylim =c(0,7),breaks =rvar)
hist(s381,  right = FALSE, main = "Histogram 1",freq = FALSE,ylim = c(0,0.4))
rvar= seq(from = 0, to = 120, by = 10)
par(mfrow=c(2,2))
hist(s381,  right = FALSE, main = "Histogram 1",freq = TRUE,ylim = c(0,7))
hist(s481,right = FALSE, main = "Histogram 2",freq = TRUE,ylim =c(0,7),breaks =rvar)
hist(s381,right = FALSE, main = "Histogram 3",freq = FALSE,ylim = c(0,0.4),breaks =rvar)
hist(s481,right = FALSE, main = "Histogram 4",freq = FALSE,ylim = c(0,0.4),breaks =rvar)
rvar= seq(from = 0, to = 120, by = 10)
par(mfrow=c(2,2))
hist(s381,  right = FALSE, main = "Histogram 1",freq = TRUE,ylim = c(0,7))
hist(s481,right = FALSE, main = "Histogram 2",freq = TRUE,ylim =c(0,7),breaks =rvar)
hist(s381,right = FALSE, main = "Histogram 3",freq = FALSE,ylim = c(0,0.4),breaks =rvar)
curve(dnorm(data$Grade[data$Course=="Stat_381"], mean=mean(s381), sd = sd(s381)), add=TRUE,col = "Red")
hist(s481,right = FALSE, main = "Histogram 4",freq = FALSE,ylim = c(0,0.4),breaks =rvar)
curve(dnorm(data$Grade[data$Course=="Stat_481"], mean=mean(s481), sd = sd(s481)), add=TRUE,col = "Red")
rvar= seq(from = 0, to = 120, by = 10)
par(mfrow=c(2,2))
hist(s381,  right = FALSE, main = "Histogram 1",freq = TRUE,ylim = c(0,7))
hist(s481,right = FALSE, main = "Histogram 2",freq = TRUE,ylim =c(0,7),breaks =rvar)
hist(s381,right = FALSE, main = "Histogram 3",freq = FALSE,ylim = c(0,0.4),breaks =rvar)
curve(dnorm(x, mean=mean(s381), sd = sd(s381)), add=TRUE,col = "Red")
hist(s481,right = FALSE, main = "Histogram 4",freq = FALSE,ylim = c(0,0.4),breaks =rvar)
curve(dnorm(x, mean=mean(s481), sd = sd(s481)), add=TRUE,col = "Red")
rvar= seq(from = 0, to = 120, by = 10)
par(mfrow=c(2,2))
hist(s381,  right = FALSE, main = "Histogram 1",freq = TRUE,ylim = c(0,7),breaks =rvar)
hist(s481,right = FALSE, main = "Histogram 2",freq = TRUE,ylim =c(0,7),breaks =rvar)
hist(s381,right = FALSE, main = "Histogram 3",freq = FALSE,ylim = c(0,0.4),breaks =rvar)
curve(dnorm(x, mean=mean(s381), sd = sd(s381)), add=TRUE,col = "Red")
hist(s481,right = FALSE, main = "Histogram 4",freq = FALSE,ylim = c(0,0.4),breaks =rvar)
curve(dnorm(x, mean=mean(s481), sd = sd(s481)), add=TRUE,col = "Red")
p(s381)
p(s481)
print(s381)
print(s481)
dl <- c(131.1, 130.7, 130.9, 129.5, 129.6,
128.8, 130.7, 128.3, 128.2, 129.7,
130.1, 129.3, 128.7, 129.0, 129.4,
130.4, 129.5, 130.1, 129.8, 130.0)
d5 <- c(131.1,130.7,130.9,129.5, 129.6,
128.8, 130.7, 128.3, 128.2, 129.7,
130.1, 129.3, 128.7, 129.0, 129.4,
130.4, 129.5, 130.1, 129.8, 130.0)
print(d5)
d5 <- c(131.1, 130.7, 130.9, 129.5, 129.6,
128.8, 130.7, 128.3, 128.2, 129.7,
130.1, 129.3, 128.7, 129.0, 129.4,
130.4, 129.5, 130.1, 129.8, 130.0)
t.test(d5, mu = 130, alternative = "two.sided" , conf.level = 0.92)
#Final Project version1
d2010 <- read.csv(file = "/Users/andreaherrera/Downloads/Dataset_2010.csv",header = TRUE)
d1950 <- read.csv(file = "/Users/andreaherrera/Downloads/Dataset_1950.csv",header = TRUE)
#Final Project version1
d2010 <- read.csv(file = "/Users/andreaherrera/Downloads/Dataset_2010.csv",header = TRUE)
d1950 <- read.csv(file = "/Users/andreaherrera/Downloads/Dataset_1950.csv",header = TRUE)
#Part2
b= seq(from = 0, to = 7, by = 0.5)
hist(d2010,
right = FALSE, ## indicates left closed, right open intervals
freq = TRUE, ## optional
breaks =b,
main = "d2010", ## optional
ylim = c(0:30), ## optional
plot = TRUE ## optional
)
#Final Project version1
d2010 <- read.csv(file = "/Users/andreaherrera/Downloads/Dataset_2010.csv",header = TRUE)
d1950 <- read.csv(file = "/Users/andreaherrera/Downloads/Dataset_1950.csv",header = TRUE)
#Part2
b= seq(from = 0, to = 7, by = 0.5)
hist(d2010,
right = FALSE, ## indicates left closed, right open intervals
freq = TRUE, ## optional
breaks =b,
main = "d2010", ## optional
ylim = c(0:30), ## optional
)
print(d2010)
#Final Project version1
d2010 <- read.csv(file = "/Users/andreaherrera/Downloads/Dataset_2010.csv",header = TRUE)
d1950 <- read.csv(file = "/Users/andreaherrera/Downloads/Dataset_1950.csv",header = TRUE)
#print(d2010)
#Part2
b= seq(from = 0, to = 7, by = 0.5)
hist(d2010$ASL,
right = FALSE, ## indicates left closed, right open intervals
freq = TRUE, ## optional
breaks = b,
main = "d2010", ## optional
ylim = c(0:30), ## optional
)
#Final Project version1
d2010 <- read.csv(file = "/Users/andreaherrera/Downloads/Dataset_2010.csv",header = TRUE)
d1950 <- read.csv(file = "/Users/andreaherrera/Downloads/Dataset_1950.csv",header = TRUE)
#print(d2010)
#Part2
b= seq(from = 0, to = 7, by = 0.5)
hist(d2010$ASL,
right = FALSE, ## indicates left closed, right open intervals
freq = TRUE, ## optional
breaks = b,
main = "d2010", ## optional
ylim = c(0:134), ## optional
)
#Final Project version1
d2010 <- read.csv(file = "/Users/andreaherrera/Downloads/Dataset_2010.csv",header = TRUE)
d1950 <- read.csv(file = "/Users/andreaherrera/Downloads/Dataset_1950.csv",header = TRUE)
#print(d2010)
#Part2
b= seq(from = 0, to = 7, by = 0.5)
hist(d2010$ASL,
right = FALSE, ## indicates left closed, right open intervals
freq = TRUE, ## optional
breaks = b,
main = "d2010", ## optional
ylim = c(0:10), ## optional
)
#Final Project version1
d2010 <- read.csv(file = "/Users/andreaherrera/Downloads/Dataset_2010.csv",header = TRUE)
d1950 <- read.csv(file = "/Users/andreaherrera/Downloads/Dataset_1950.csv",header = TRUE)
#print(d2010)
#Part2
b= seq(from = 0, to = 7, by = 0.5)
hist(d2010$ASL,
right = FALSE, ## indicates left closed, right open intervals
freq = TRUE, ## optional
breaks = b,
main = "d2010", ## optional
ylim = c(0,30), ## optional
)
fivenum(d2010$ASL);
summary(d2010$ASL)
mean<-mean(d2010$ASL)
v<-var(d2010$ASL)
sd<- sqrt(v)
print(mean)
print(sd)
mean<-mean(d2010$ASL)
v<-var(d2010$ASL)
sd<- sqrt(v)
len<-length(d2010$ASL)
print(len)
print(mean)
print(sd)
d1950
t.test(d2010$ASL, d1950$ASL)
#part3
#print(d1950)
t.test(d2010$ASL, d1950$ASL, paired = TRUE, alternative = "less", mu = 4.9,
conf.level = 0.895)
#print(d1950)
t.test(d1950$ASL,d2010$ASL, paired = TRUE, alternative = "less", mu = 4.9,
conf.level = 0.895)
print(d1950)
t.test(d1950$ASL,d2010$ASL, paired = TRUE, alternative = "less", mu =0,
conf.level = 0.895)
mean2<-mean(d1950$ASL)
v2<-var(d1950$ASL)
sd2<- sqrt(v2)
len2<-length(d1950$ASL)
print(len2)
print(mean2)
print(sd2)
mean<-mean(d2010$ASL)
v<-var(d2010$ASL)
sd<- sqrt(v)
len<-length(d2010$ASL)
print(len)
print(mean)
print(sd)
mean2<-mean(d1950$ASL)
v2<-var(d1950$ASL)
sd2<- sqrt(v2)
len2<-length(d1950$ASL)
print(len2)
print(mean2)
print(sd2)
mean2-mean
#part3
#print(d1950)
t.test(d1950$ASL,d2010$ASL, paired = FALSE, alternative = "less", mu =4.9,
conf.level = 0.895)
qt(0.1162, 418.84, lower.tail=TRUE)
shiny::runApp('Downloads/evlWeatherForR2')
install.packages("raster")
install.packages("raster")
summary(uicData)
getwd()
setwd("/Users/andreaherrera/Downloads/Project1")
getwd()
summary(uicData)
shiny::runApp()
##import data for uic
uicData <- read.csv("CTA_-_Ridership_-__L__Station_Entries_-_Daily_Totals_UIC-Halsted.csv", header=TRUE, stringsAsFactors=FALSE)
ohareData <- read.csv("CTA_-_Ridership_-__L__Station_Entries_-_Daily_Totals_O'Hare_Airport.csv", header=TRUE, stringsAsFactors=FALSE)
chinatownData <- read.csv("CTA_-_Ridership_-__L__Station_Entries_-_Daily_Totals_Cermak-Chinatown.csv", header=TRUE, stringsAsFactors=FALSE)
# convert the dates to the internal format
uicData$newDate <- as.Date(uicData$date, "%m/%d/%Y")
uicData$Month_ <- as.Date(uicData$newDate, "%m")
uicData$Year_ <- as.Date(uicData$newDate, "%Y")
ohareData$newDate <- as.Date(ohareData$date, "%m/%d/%Y")
ohareData$Month_ <- as.Date(ohareData$newDate, "%m")
ohareData$Year_ <- as.Date(ohareData$newDate, "%Y")
chinatownData$newDate <- as.Date(chinatownData$date, "%m/%d/%Y")
chinatownData$Month_ <- as.Date(chinatownData$newDate, "%m")
chinatownData$Year_ <- as.Date(chinatownData$newDate, "%Y")
# convert the rides from strings to numbers
uicData$Rides2 <- as.numeric(gsub(",", "", uicData$rides))
ohareData$Rides2 <- as.numeric(gsub(",", "", ohareData$rides))
chinatownData$Rides2 <- as.numeric(gsub(",", "", chinatownData$rides))
#get list of stations
station <- c(uicData$stationname[1],ohareData$stationname[1],chinatownData$stationname[1])
#aggregates all the rides data by month and year
uicData$year_month <- floor_date(uicData$newDate, "month")
uicData$yearss <- floor_date(uicData$newDate, "year")
data_aggrUIC <- uicData %>%                         # Aggregate data by month
group_by(year_month) %>%
dplyr::summarize(Rides2 = sum(Rides2)) %>%
as.data.frame()
year_aggrUIC <- uicData %>%                         # Aggregate data by year
group_by(yearss) %>%
dplyr::summarize(Rides2 = sum(Rides2)) %>%
as.data.frame()
ohareData$year_month <- floor_date(ohareData$newDate, "month")
ohareData$yearss <- floor_date(ohareData$newDate, "year")
data_aggrOhare <- ohareData %>%                         # Aggregate data by month
group_by(year_month) %>%
dplyr::summarize(Rides2 = sum(Rides2)) %>%
as.data.frame()
year_aggrOhare <- ohareData %>%                         # Aggregate data by year
group_by(yearss) %>%
dplyr::summarize(Rides2 = sum(Rides2)) %>%
as.data.frame()
chinatownData$year_month <- floor_date(chinatownData$newDate, "month")
chinatownData$yearss <- floor_date(chinatownData$newDate, "year")
data_aggrChina <- chinatownData %>%                         # Aggregate data by month
group_by(year_month) %>%
dplyr::summarize(Rides2 = sum(Rides2)) %>%
as.data.frame()
year_aggrChinatownData <- chinatownData %>%                 # Aggregate data by year
group_by(yearss) %>%
dplyr::summarize(Rides2 = sum(Rides2)) %>%
as.data.frame()
listNames <- "Rides2"
years<-c(2001:2021)
months<-c(1:12)
summary(uicData)
View(data_aggrChina)
View(data_aggrChina)
View(data_aggrOhare)
View(data_aggrOhare)
View(data_aggrUIC)
View(data_aggrUIC)
View(ohareData)
View(ohareData)
View(uicData)
View(uicData)
View(chinatownData)
View(chinatownData)
View(year_aggrChinatownData)
View(year_aggrChinatownData)
View(year_aggrOhare)
View(year_aggrOhare)
View(year_aggrUIC)
View(year_aggrUIC)
summary(data_aggrUIC)
